---
layout: post
title:      "React and Redux "
date:       2021-02-22 23:25:56 +0000
permalink:  react_and_redux
---


The paradigm of React makes some sense to me after finishing the final project. In my head I think of React as the logic of Javascript and the visibility of html, wrapped into a syntactical extension of Javascript. We can make components that do a ton of stuff; delete whats on the page, add likes, change text color and size and connect to a greater store where we can update state on a global level. 
What caught me off guard is the flexibility of JSX when ultimately rendering React elements. It took a while to realize that what is in the return function of these components was the ultimate goal (rendering a button, or a larger container Component (with a capital C). Many of these components only have to render something to the DOM ( a button or simple text for instance) and react to small changes. They are reusable and small and make the UI interactive without a ton of logic overhead. Some components do more, like having a local state, updating that state after events from the user or further sending state to a reducer and store for global state updates. In my experience, the smaller the component, the better and if we can get away with keeping most of the logic in a container component (holding functions and passing props down to child components) we can control the flow of data more efficiently. The relationships between these containers and children is important though, and knowing what needs to be rendered where was a weak point in my project build. I was lost on why a functional component (in this case Owners - which simply rendered a list of knife owners) was also holding my KnivesContainer component (ultimately to help render the knives of their respective owners. Model Associations came into play here, and passing data from owners to knives made rendering this association possible).
In my own project, I create a local state within a class component to hold  values from a form. That local state is then dispatched with an action (createKnife) to a Redux reducer that changes global state for me. Here-in is the flexibility these two libraries offer us, Redux can handle a greater scope of state across an application that has alot of components or various forms of state, or helping direct asynchronus actions when interacting with an external API. React and Redux gives us the opportunity to make the UI more interactive without carrying along the logic of dealing with a database crammed into our components so we can see changes on the DOM dealing with a local state that only really requires a component to keep track of local data like likes to a post or a clock / timer on a page. If we need a global state, Redux plays the part of larger updates and keeping track of how that state has changed across our application. 
