---
layout: post
title:      "Hashing it out for the CLI GEM Project"
date:       2020-06-06 21:05:14 +0000
permalink:  hashing_it_out_for_the_cli_gem_project
---


Approching the development of my own CLI was a matter of defining what I wanted to look for and what that information could  teach others. My cohort leader provided a walkthrough on how to make a CLI from scratch and used a more jovial approach to show us how to tap into the information the internet provides and harness that information with a simple CLI. I was happy to find the NASA Near-Earth-Object API and that it lent itself to such an application. I was somewhat less enthusiastic to find how the data was stored.
Enter hashes, a collection convention in Ruby that stores information in a sort of dictionary format; the "key-value-pair" format. With any collection this format gives the user a way to find the "name" of the information they are looking for and, in the case there are different subsets of information like arrays, finding more specific information. In my case, looking at asteroids flying past earth, NASA was keeping track of a GREAT deal of information and storing it in hashes that required subsets of even more information. Enter arrays, the next best collection convention in Ruby! Arrays give a collection an index for every place a certain value is stored. Nasa created their data set by storing their asteroid data in a new hash by date, everyday, and listing their asteroids by hashes with arrays inside them! Woof, nested data sets would be a struggle for me as we made our way toward this project and it would become the crux of my CLI to be able to iterate over these collections to provide a user with coherent information. 
At this point, being able to operate on complex data sets would simply require the .each method, calling upon Ruby to look into EVERY collection to isolate the key (in this case, asteroids) and their respective data (name, speed and size) but defining where to ask the .each to work was my biggest challenge. I actually needed someone else to help sort out where a curly brace began and ended, and how many square brackets we were dealing with. Luckily, most of my "keys" for these hashes were strings, simply names for the kinds of information I was looking for and when I realized my arrays simply required an index, a "place by number" at which my desired information lay, was when I was finally able to make some progress. Even saying it out loud, Im looking in the "date" hash in the [1]st array index and then in the "name" hash to get an asteroids name became the key to working with this data and translating it for the user. This project became a big lesson in approaching large amounts of complex data and Im happy to walk away with a new perspective on how to do it.
